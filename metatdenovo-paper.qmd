---
title: "nf-core/metatdenovo"
author: "danilo.dileo@lnu.se, emelie.nilsson@lnu.se, ..., daniel.lundin@lnu.se"
date: "`r format(Sys.time(), '%Y-%m-%d')`"
format:
  html:
    code-fold: true
    toc: true
bibliography:
  - bibliography.bib
  - grateful-refs.bib
---

```{r setup}
#| label: setup
#| echo: false
#| cache: false

knitr::opts_chunk$set(echo = TRUE, fig.path='figures/', cache = TRUE, fig.width = 10)
ggplot2::theme_set(ggplot2::theme_bw())
```

```{r libraries}
#| label: libraries
#| message: false
#| cache: false
#| include: false

library(readr)
library(data.table)
library(dtplyr)
library(dplyr, warn.conflicts = FALSE)
library(tidyr)
library(lubridate)
library(purrr)
library(stringr)
library(ggplot2)
library(kfigr)
library(knitr)
library(DT)
library(grateful)
library(patchwork)
```

```{r constants}
#| label: constants
```

```{r read-execution-traces}
#| label: read-data
extraces <- Sys.glob('nextflow/*/*/pipeline_info/execution_trace*') %>%
  read_tsv(show_col_types = FALSE, id = 'fname') %>%
  mutate(
    project = str_replace(fname, 'nextflow\\/([^/]+)\\/.*', '\\1'),
    run     = str_remove(fname, 'nextflow\\/[^/]+\\/') %>% str_remove('\\/.*'),
    p       = str_remove(name, '.*:'),
    process = str_remove(p, ' .*'),
    sample  = str_replace(p, '.*\\((.*)\\)', '\\1'),
    durationc  = str_remove(duration, ' *\\d+ms') %>%
      ifelse(str_detect(., '\\dh'), ., str_c('0h', ., sep = ' ')) %>%
      ifelse(str_detect(., '\\dm'), ., str_c('0m', ., sep = ' ')) %>%
      ifelse(str_detect(., '\\ds'), ., str_c(., '0s', sep = ' ')) %>%
      hms(),
    realtimec  = str_remove(realtime, ' *\\d+ms') %>%
      ifelse(str_detect(., '\\dh'), ., str_c('0h', ., sep = ' ')) %>%
      ifelse(str_detect(., '\\dm'), ., str_c('0m', ., sep = ' ')) %>%
      ifelse(str_detect(., '\\ds'), ., str_c(., '0s', sep = ' ')) %>%
      hms(),
    peak_rssc = case_when(
      str_detect(peak_rss, 'GB') ~ str_remove(peak_rss, ' .*') %>% as.numeric() * 1024^3,
      str_detect(peak_rss, 'MB') ~ str_remove(peak_rss, ' .*') %>% as.numeric() * 1024^2,
      str_detect(peak_rss, 'KB') ~ str_remove(peak_rss, ' .*') %>% as.numeric() * 1024^1,
      str_detect(peak_rss, 'B')  ~ str_remove(peak_rss, ' .*') %>% as.numeric() * 1024^0,
      TRUE                       ~ 0
    ),
    peak_vmemc = case_when(
      str_detect(peak_vmem, 'GB') ~ str_remove(peak_rss, ' .*') %>% as.numeric() * 1024^3,
      str_detect(peak_vmem, 'MB') ~ str_remove(peak_rss, ' .*') %>% as.numeric() * 1024^2,
      str_detect(peak_vmem, 'KB') ~ str_remove(peak_rss, ' .*') %>% as.numeric() * 1024^1,
      str_detect(peak_vmem, 'B')  ~ str_remove(peak_rss, ' .*') %>% as.numeric() * 1024^0,
      TRUE                       ~ 0
    ),
    rcharc = case_when(
      str_detect(rchar, 'GB') ~ str_remove(peak_rss, ' .*') %>% as.numeric() * 1024^3,
      str_detect(rchar, 'MB') ~ str_remove(peak_rss, ' .*') %>% as.numeric() * 1024^2,
      str_detect(rchar, 'KB') ~ str_remove(peak_rss, ' .*') %>% as.numeric() * 1024^1,
      str_detect(rchar, 'B')  ~ str_remove(peak_rss, ' .*') %>% as.numeric() * 1024^0,
      TRUE                       ~ 0
    ),
    wcharc = case_when(
      str_detect(wchar, 'GB') ~ str_remove(peak_rss, ' .*') %>% as.numeric() * 1024^3,
      str_detect(wchar, 'MB') ~ str_remove(peak_rss, ' .*') %>% as.numeric() * 1024^2,
      str_detect(wchar, 'KB') ~ str_remove(peak_rss, ' .*') %>% as.numeric() * 1024^1,
      str_detect(wchar, 'B')  ~ str_remove(peak_rss, ' .*') %>% as.numeric() * 1024^0,
      TRUE                       ~ 0
    )
  ) %>%
  select(-p, -fname) %>%
  separate(run, c('assembler', 'orf_caller', 'bbnorm', 'minlen'), remove = FALSE, sep = '\\.', fill = 'right') %>%
  mutate(minlen = ifelse(is.na(minlen), 0, str_remove(minlen, 'minlen') %>% as.integer())) %>%
  relocate(run, assembler, orf_caller, bbnorm, minlen, process, sample)

process_groups <- read_tsv('data/process_groups.tsv', show_col_types = FALSE)
```

```{r read-overall-stats}
#| label: read-overall-stats
#| warning: false
overall_stats <- Sys.glob('nextflow/*/*/summary_tables/*overall_stats.tsv.gz') %>%
  read_tsv(id = 'fname', show_col_types = FALSE) %>%
  mutate(
    project = str_replace(fname, 'nextflow\\/([^/]+)\\/.*', '\\1'),
    run     = str_remove(fname, 'nextflow\\/[^/]+\\/') %>% str_remove('\\/.*')
  ) %>%
  select(-fname) %>%
  separate(run, c('assembler', 'orf_caller', 'bbnorm', 'minlen'), remove = FALSE, sep = '\\.', fill = 'right') %>%
  mutate(minlen = ifelse(is.na(minlen), 0, str_remove(minlen, 'minlen') %>% as.integer())) %>%
  relocate(run, assembler, orf_caller, bbnorm, minlen)
```

```{r read-transrate}
#| label: read-transrate
#| warning: false
transrates <- Sys.glob('nextflow/*/*/transrate/*.csv') %>%
  read_csv(id = 'fname', show_col_types = FALSE) %>%
  mutate(
    project = str_replace(fname, 'nextflow\\/([^/]+)\\/.*', '\\1'),
    run     = str_remove(fname, 'nextflow\\/[^/]+\\/') %>% str_remove('\\/.*')
  ) %>%
  separate(run, c('assembler', 'orf_caller', 'bbnorm', 'minlen'), remove = FALSE, sep = '\\.', fill = 'right') %>%
  select(-fname, -run, -orf_caller) %>%
  mutate(minlen = ifelse(is.na(minlen), 0, str_remove(minlen, 'minlen') %>% as.integer())) %>%
  relocate(assembler, bbnorm, minlen) %>%
  distinct()
```

# Version history

# Summary

# Introduction

Cite nf-core [@nf-core].

# Materials and Methods

## R and packages

This analysis was run with `r R.version$version.string`. Versions of packages used can be found in Table @tbl-cite-packages.

```{r}
#| label: tbl-cite-packages
#| cache: false
#| tbl-cap: Versions of R and packages used in this analysis.

cite_packages(output = "table", pkgs = "Session", out.dir = getwd()) %>%
  kable()
```

# Results

## Execution traces

* Quantification takes longest followed by QC, ORF calling and assembly
* Read-depth normalization with BBDuk does not reduce time for assembly but considerably decrease memory usage

See (**Fig. @fig-extraces**).

```{r fig-extraces}
#| label: fig-extraces
#| fig-height: 5
#| fig-cap: '**CPU consumption, assembly memory usage and size.** A) Realtime cpu use per task type and pipeline execution, B) peak virtual memory usage and C) assembly size per assembly.'

p0 <- extraces %>%
  filter(project == 'mst-1') %>%
  left_join(process_groups, by = join_by(process)) %>%
  group_by(process_group, run) %>%
  summarise(realtimec = sum(realtimec), .groups = 'drop') %>%
  ggplot(aes(x = run, y = realtimec, fill = process_group)) +
  geom_col() +
  scale_fill_brewer('Process group', palette = 'Paired') +
  xlab('') + ylab('Seconds') +
  coord_flip() +
  theme(axis.text.y = element_text(size=12))

p1 <- extraces %>%
  filter(project == 'mst-1') %>%
  left_join(process_groups, by = join_by(process)) %>%
  filter(process_group == 'assembly') %>%
  group_by(run) %>%
  filter(peak_vmemc == max(peak_vmemc)) %>%
  ungroup() %>%
  transmute(assembler, bbnorm, peak_vmemc = round(peak_vmemc/1024^3)) %>%
  distinct() %>%
  ggplot(aes(x = assembler, y = peak_vmemc, colour = bbnorm)) +
  geom_point() +
  scale_colour_discrete('') +
  xlab('') +
  ylab('Max. virtual memory (GB)') +
  coord_flip() +
  theme(axis.text.y = element_text(size=12))

p2 <- transrates %>%
  filter(project == 'mst-1') %>%
  mutate(mbp = n_bases/1000^2 %>% round()) %>%
  ggplot(aes(x = assembler, y = mbp, colour = bbnorm)) +
  geom_point() +
  scale_colour_discrete('') +
  xlab('') +
  ylab('Assembly size (Mbp)') +
  coord_flip() +
  theme(axis.text.y = element_text(size=12))

p0 / ( p1 + p2 ) +
  plot_layout(heights = c(4, 1), guides = 'collect') +
  plot_annotation(tag_levels = 'A')
```

# Discussion

# References
