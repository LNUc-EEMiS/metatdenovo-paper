---
title: "nf-core/metatdenovo"
author: "danilo.dileo@lnu.se, emelie.nilsson@lnu.se, ..., daniel.lundin@lnu.se"
date: "`r format(Sys.time(), '%Y-%m-%d')`"
format:
  html:
    code-fold: true
    toc: true
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
bibliography:
  - bibliography.bib
  - grateful-refs.bib
---

```{r setup}
#| label: setup
#| echo: false
#| cache: false

knitr::opts_chunk$set(echo = TRUE, fig.path='figures/', cache = TRUE, fig.width = 10)
ggplot2::theme_set(ggplot2::theme_bw())
```

```{r libraries}
#| label: libraries
#| message: false
#| cache: false
#| include: false

library(readr)
library(data.table)
library(dtplyr)
library(dplyr, warn.conflicts = FALSE)
library(tidyr)
library(lubridate)
library(purrr)
library(stringr)
library(ggplot2)
library(kfigr)
library(knitr)
library(DT)
library(grateful)
library(patchwork)
```

```{r constants}
#| label: constants

TAXON_RANKS_SORTED = c('root', 'domain', 'phylum', 'class', 'order', 'family', 'genus', 'species')
mst1.samples.color <- c("#ea3a25", "#f09536", "#1a43f5", "#74fafd")
```

```{r read-execution-traces}
#| label: read-data
#| cache-lazy: false

extraces <- Sys.glob('nextflow/*/*/pipeline_info/execution_trace*') %>%
  read_tsv(show_col_types = FALSE, id = 'fname') %>%
  mutate(
    project = str_replace(fname, 'nextflow\\/([^/]+)\\/.*', '\\1'),
    run     = str_remove(fname, 'nextflow\\/[^/]+\\/') %>% str_remove('\\/.*'),
    p       = str_remove(name, '.*:'),
    process = str_remove(p, ' .*'),
    sample  = str_replace(p, '.*\\((.*)\\)', '\\1'),
    durationc  = str_remove(duration, ' *\\d+ms') %>%
      ifelse(str_detect(., '\\dh'), ., str_c('0h', ., sep = ' ')) %>%
      ifelse(str_detect(., '\\dm'), ., str_c('0m', ., sep = ' ')) %>%
      ifelse(str_detect(., '\\ds'), ., str_c(., '0s', sep = ' ')) %>%
      hms(),
    realtimec  = str_remove(realtime, ' *\\d+ms') %>%
      ifelse(str_detect(., '\\dh'), ., str_c('0h', ., sep = ' ')) %>%
      ifelse(str_detect(., '\\dm'), ., str_c('0m', ., sep = ' ')) %>%
      ifelse(str_detect(., '\\ds'), ., str_c(., '0s', sep = ' ')) %>%
      hms(),
    num_cpus   = ( str_remove(`%cpu`, '%') %>%
      as.double()/100 ) %>%
      ceiling(),
    peak_rssc = case_when(
      str_detect(peak_rss, 'GB') ~ str_remove(peak_rss, ' .*') %>% as.numeric() * 1024^3,
      str_detect(peak_rss, 'MB') ~ str_remove(peak_rss, ' .*') %>% as.numeric() * 1024^2,
      str_detect(peak_rss, 'KB') ~ str_remove(peak_rss, ' .*') %>% as.numeric() * 1024^1,
      str_detect(peak_rss, 'B')  ~ str_remove(peak_rss, ' .*') %>% as.numeric() * 1024^0,
      TRUE                       ~ 0
    ),
    peak_vmemc = case_when(
      str_detect(peak_vmem, 'GB') ~ str_remove(peak_rss, ' .*') %>% as.numeric() * 1024^3,
      str_detect(peak_vmem, 'MB') ~ str_remove(peak_rss, ' .*') %>% as.numeric() * 1024^2,
      str_detect(peak_vmem, 'KB') ~ str_remove(peak_rss, ' .*') %>% as.numeric() * 1024^1,
      str_detect(peak_vmem, 'B')  ~ str_remove(peak_rss, ' .*') %>% as.numeric() * 1024^0,
      TRUE                       ~ 0
    ),
    rcharc = case_when(
      str_detect(rchar, 'GB') ~ str_remove(peak_rss, ' .*') %>% as.numeric() * 1024^3,
      str_detect(rchar, 'MB') ~ str_remove(peak_rss, ' .*') %>% as.numeric() * 1024^2,
      str_detect(rchar, 'KB') ~ str_remove(peak_rss, ' .*') %>% as.numeric() * 1024^1,
      str_detect(rchar, 'B')  ~ str_remove(peak_rss, ' .*') %>% as.numeric() * 1024^0,
      TRUE                       ~ 0
    ),
    wcharc = case_when(
      str_detect(wchar, 'GB') ~ str_remove(peak_rss, ' .*') %>% as.numeric() * 1024^3,
      str_detect(wchar, 'MB') ~ str_remove(peak_rss, ' .*') %>% as.numeric() * 1024^2,
      str_detect(wchar, 'KB') ~ str_remove(peak_rss, ' .*') %>% as.numeric() * 1024^1,
      str_detect(wchar, 'B')  ~ str_remove(peak_rss, ' .*') %>% as.numeric() * 1024^0,
      TRUE                       ~ 0
    )
  ) %>%
  select(-p, -fname) %>%
  separate(run, c('assembler', 'orf_caller', 'bbnorm', 'minlen'), remove = FALSE, sep = '\\.', fill = 'right') %>%
  mutate(minlen = ifelse(is.na(minlen), 0, str_remove(minlen, 'minlen') %>% as.integer())) %>%
  mutate(assembly = sprintf("%s%s%s", assembler, ifelse(bbnorm == 'with_bbnorm', '*', ''), ifelse(minlen > 0, '†', ''))) %>%
  relocate(project, run, assembly, assembler, orf_caller, bbnorm, minlen, process, sample)

process_groups <- read_tsv('data/process_groups.tsv', show_col_types = FALSE)
```

```{r read-overall-stats}
#| label: read-overall-stats
#| warning: false
#| cache-lazy: false

overall_stats <- Sys.glob('nextflow/*/*/summary_tables/*overall_stats.tsv.gz') %>%
  read_tsv(id = 'fname', show_col_types = FALSE) %>%
  mutate(
    project = str_replace(fname, 'nextflow\\/([^/]+)\\/.*', '\\1'),
    run     = str_remove(fname, 'nextflow\\/[^/]+\\/') %>% str_remove('\\/.*')
  ) %>%
  select(-fname) %>%
  separate(run, c('assembler', 'orf_caller', 'bbnorm', 'minlen'), remove = FALSE, sep = '\\.', fill = 'right') %>%
  mutate(minlen = ifelse(is.na(minlen), 0, str_remove(minlen, 'minlen') %>% as.integer())) %>%
  mutate(assembly = sprintf("%s%s%s", assembler, ifelse(bbnorm == 'with_bbnorm', '*', ''), ifelse(minlen > 0, '†', ''))) %>%
  relocate(project, run, assembly, assembler, orf_caller, bbnorm, minlen)
```

```{r read-transrate}
#| label: read-transrate
#| warning: false
#| cache-lazy: false

transrates <- Sys.glob('nextflow/*/*/transrate/*.csv') %>%
  read_csv(id = 'fname', show_col_types = FALSE) %>%
  mutate(
    project = str_replace(fname, 'nextflow\\/([^/]+)\\/.*', '\\1'),
    run     = str_remove(fname, 'nextflow\\/[^/]+\\/') %>% str_remove('\\/.*')
  ) %>%
  separate(run, c('assembler', 'orf_caller', 'bbnorm', 'minlen'), remove = FALSE, sep = '\\.', fill = 'right') %>%
  select(-fname, -run, -orf_caller) %>%
  mutate(minlen = ifelse(is.na(minlen), 0, str_remove(minlen, 'minlen') %>% as.integer())) %>%
  mutate(assembly = sprintf("%s%s%s", assembler, ifelse(bbnorm == 'with_bbnorm', '*', ''), ifelse(minlen > 0, '†', ''))) %>%
  relocate(project, assembly, assembler, bbnorm, minlen) %>%
  distinct()
```

```{r read-idxstats}
#| label: read-idxstats
#| cache-lazy: false

idxstats <- Sys.glob('nextflow/*/*/samtools/*.idxstats') %>%
  read_tsv(id = 'fname', show_col_types = FALSE, col_names = c('contig', 'length', 'n_mapped', 'n_unmapped')) %>%
  filter(contig != '*', n_mapped > 0) %>%
  mutate(
    project = str_replace(fname, 'nextflow\\/([^/]+)\\/.*', '\\1'),
    run     = str_remove(fname,  'nextflow\\/[^/]+\\/') %>% str_remove('\\/.*') %>% str_replace('^([^.]+)\\.[^.]+(.*)', '\\1\\2'),
    sample  = str_replace(fname, '.*\\.([^.]+).idxstats', '\\1')
  ) %>%
  select(-fname) %>%
  distinct() %>%
  mutate(r = n_mapped/length) %>%
  group_by(project, run, sample) %>%
  mutate(tpm = r/sum(r) * 1e6) %>%
  ungroup() %>%
  select(-r) %>%
  separate(run, c('assembler', 'bbnorm', 'minlen'), remove = FALSE, sep = '\\.', fill = 'right') %>%
  mutate(minlen = ifelse(is.na(minlen), 0, str_remove(minlen, 'minlen') %>% as.integer())) %>%
  mutate(assembly = sprintf("%s%s%s", assembler, ifelse(bbnorm == 'with_bbnorm', '*', ''), ifelse(minlen > 0, '†', ''))) %>%
  relocate(project, run, assembly, assembler, bbnorm, minlen, sample)
```

```{r read-counts}
#| label: read-counts
#| cache-lazy: false

counts <- Sys.glob('nextflow/*/*/summary_tables/*.counts.tsv.gz') %>%
  read_tsv(id = 'fname', show_col_types = FALSE) %>%
  mutate(
    project = str_replace(fname, 'nextflow\\/([^/]+)\\/.*', '\\1'),
    run     = str_remove(fname, 'nextflow\\/[^/]+\\/') %>% str_remove('\\/.*')
  ) %>%
  select(-fname) %>%
  separate(run, c('assembler', 'orf_caller', 'bbnorm', 'minlen'), remove = FALSE, sep = '\\.', fill = 'right') %>%
  mutate(minlen = ifelse(is.na(minlen), 0, str_remove(minlen, 'minlen') %>% as.integer())) %>%
  mutate(assembly = sprintf("%s%s%s", assembler, ifelse(bbnorm == 'with_bbnorm', '*', ''), ifelse(minlen > 0, '†', ''))) %>%
  relocate(project, run, assembly, assembler, orf_caller, bbnorm, minlen, sample)
```

```{r read-eukulele}
#| label: read-eukulele
#| cache-lazy: false

eukulele <- Sys.glob('nextflow/*/*/summary_tables/*_taxonomy.tsv.gz') %>%
  read_tsv(id = 'fname', show_col_types = FALSE) %>%
  mutate(
    db      = str_replace(fname, 'nextflow\\/.*\\.(.*)_taxonomy.tsv.gz', '\\1'),
    project = str_replace(fname, 'nextflow\\/([^/]+)\\/.*', '\\1'),
    run     = str_remove(fname, 'nextflow\\/[^/]+\\/') %>% str_remove('\\/.*')
  ) %>%
  select(-fname) %>%
  separate(run, c('assembler', 'orf_caller', 'bbnorm', 'minlen'), remove = FALSE, sep = '\\.', fill = 'right') %>%
  mutate(minlen = ifelse(is.na(minlen), 0, str_remove(minlen, 'minlen') %>% as.integer())) %>%
  mutate(assembly = sprintf("%s%s%s", assembler, ifelse(bbnorm == 'with_bbnorm', '*', ''), ifelse(minlen > 0, '†', ''))) %>%
  relocate(project, run, assembly, assembler, orf_caller, bbnorm, minlen, db) %>%
  mutate(
    taxon_rank = case_when(
      str_detect(domain,  'uncl\\.')  ~ 'root',
      str_detect(phylum,  'uncl\\.')  ~ 'domain',
      str_detect(class,   'uncl\\.')  ~ 'phylum',
      str_detect(order,   'uncl\\.')  ~ 'class',
      str_detect(family,  'uncl\\.')  ~ 'order',
      str_detect(genus,   'uncl\\.')  ~ 'family',
      str_detect(species, 'uncl\\.')  ~ 'genus',
      TRUE                            ~ 'species'
    ) %>% factor(levels = TAXON_RANKS_SORTED, ordered = TRUE)
  )
```

```{r tax-annots-og}
#| label: tax-annots-og
#| cache-lazy: false

original.tax <- tibble(
  sample = c(rep("Lca",7), rep("Lcc",7), rep("Hca",7), rep("Hcc",7)),
  family = c(rep(c("Other Flavobacteria", "Flavobacteriaceae", "Other Gammaproteobacteria", "Alteromonadaceae", "Other Alphaproteobacteria", "SAR11 clade", "Rhodobacteraceae"),4)),
  tpm = c(0.1, 0.5, 2.3, 2.4, 0.3, 0.4, 0.1,
          0.1, 0.5, 2.3, 2.3, 0.5, 0.2, 0.1,
          0.3, 0.5, 2.5, 0.7, 0.4, 0.1, 0.1,
          0.1, 0.7, 2.5, 1.7, 0.9, 0.2, 0.2)
  )
```

```{r read-eggnogs}
#| label: read-eggnogs
#| cache-lazy: false

eggnogs <- Sys.glob('nextflow/*/*/summary_tables/*.emapper.tsv.gz') %>%
  read_tsv(id = 'fname', show_col_types = FALSE) %>%
  mutate(
    project = str_replace(fname, 'nextflow\\/([^/]+)\\/.*', '\\1'),
    run     = str_remove(fname, 'nextflow\\/[^/]+\\/') %>% str_remove('\\/.*')
  ) %>%
  select(-fname) %>%
  separate(run, c('assembler', 'orf_caller', 'bbnorm', 'minlen'), remove = FALSE, sep = '\\.', fill = 'right') %>%
  mutate(minlen = ifelse(is.na(minlen), 0, str_remove(minlen, 'minlen') %>% as.integer())) %>%
  mutate(assembly = sprintf("%s%s%s", assembler, ifelse(bbnorm == 'with_bbnorm', '*', ''), ifelse(minlen > 0, '†', ''))) %>%
  relocate(project, run, assembly, assembler, orf_caller, bbnorm, minlen)

eggnogs.edger <- read_tsv(
  'nextflow/mst-1/megahit.prokka.without_bbnorm/summary_tables/megahit.prokka.emapper.tsv.gz',
  show_col_types = FALSE
) %>%
  rename_all(str_to_lower) %>%
  select(orf, eggnog_ogs, cog_category, description, preferred_name) %>%
  separate_rows(eggnog_ogs, sep = ',') %>%
  separate(eggnog_ogs, c('eggnog', 'taxon'), sep = '@') %>%
  # Some ORFs have duplicate annotations for a taxon
  group_by(orf, taxon) %>%
  arrange(eggnog) %>%
  filter(row_number() == 1) %>%
  ungroup()
```

```{r read-kofams}
#| label: read-kofams
#| cache-lazy: false

kofams <- Sys.glob('nextflow/*/*/summary_tables/*.kofamscan.tsv.gz') %>%
  read_tsv(id = 'fname', show_col_types = FALSE) %>%
  mutate(
    project = str_replace(fname, 'nextflow\\/([^/]+)\\/.*', '\\1'),
    run     = str_remove(fname, 'nextflow\\/[^/]+\\/') %>% str_remove('\\/.*')
  ) %>%
  select(-fname) %>%
  separate(run, c('assembler', 'orf_caller', 'bbnorm', 'minlen'), remove = FALSE, sep = '\\.', fill = 'right') %>%
  mutate(minlen = ifelse(is.na(minlen), 0, str_remove(minlen, 'minlen') %>% as.integer())) %>%
  mutate(assembly = sprintf("%s%s%s", assembler, ifelse(bbnorm == 'with_bbnorm', '*', ''), ifelse(minlen > 0, '†', ''))) %>%
  relocate(project, run, assembly, assembler, orf_caller, bbnorm, minlen)
```

```{r read-prokkas}
#| label: read-prokkas
#| cache-lazy: false

prokkas <- Sys.glob('nextflow/*/*/summary_tables/*.prokka-annotations.tsv.gz') %>%
  read_tsv(id = 'fname', show_col_types = FALSE, guess_max = 1e6) %>%
  mutate(
    project = str_replace(fname, 'nextflow\\/([^/]+)\\/.*', '\\1'),
    run     = str_remove(fname, 'nextflow\\/[^/]+\\/') %>% str_remove('\\/.*')
  ) %>%
  select(-fname) %>%
  separate(run, c('assembler', 'orf_caller', 'bbnorm', 'minlen'), remove = FALSE, sep = '\\.', fill = 'right') %>%
  mutate(minlen = ifelse(is.na(minlen), 0, str_remove(minlen, 'minlen') %>% as.integer())) %>%
  mutate(assembly = sprintf("%s%s%s", assembler, ifelse(bbnorm == 'with_bbnorm', '*', ''), ifelse(minlen > 0, '†', ''))) %>%
  relocate(project, run, assembly, assembler, orf_caller, bbnorm, minlen)
```

```{r read-edger-output}
#| label: read-edger-output
#| cache-lazy: false

# the analysis is made out the run megahit.prokka_without_normalization
edger <- read_tsv('tables/mst-1_megahit.prokka.without_bbnorm.edger.tsv.gz', show_col_types = FALSE, guess_max = 1e6)
```

```{r func-annots}
#| label: func-annots
#| cache-lazy: false

func_annots <- eggnogs %>% select(project:minlen, orf) %>% mutate(orf, annot = 'eggnog') %>% distinct() %>%
  union(
    kofams %>% select(project:minlen, orf) %>% mutate(orf, annot = 'kofam') %>% distinct()
  ) %>%
  union(
    prokkas %>% filter(product != 'hypothetical protein') %>% 
      select(project:minlen, orf) %>% mutate(orf, annot = 'prokka') %>% distinct()
  ) %>%
  pivot_wider(names_from = annot, values_from = annot) %>%
  unite(combination, c(eggnog, kofam, prokka), sep = '+', na.rm = TRUE)
```

```{r func-annots-og}
#| label: func-annots-og
#| cache-lazy: false

original.fun <- tibble(
  sample = c(rep("Lca",13), rep("Lcc",13), rep("Hca",13), rep("Hcc",13)),
  SEED = c(rep(c("Protein metabolism", "Clustering-based subsystem", "RNA Metabolism", "Membrane Transport", "Carbohydrates", "Miscellaneous", "Amino Acids and Derivates", "Respiration", "Cofactors, vitamins, Pigments", "Iron acquisition and mtabolism", "Nucleosiles and Nucleotides", "Fatty Acids", "Photosynthesis"),4)),
  tpm = c(2.9, 1.8, 0.9, 1.1, 0.8, 0.88, 0.70, 0.88, 0.5, 0.5, 0.3, 0.15, 0.35,
          3.3, 2, 1, 1, 0.82, 0.89, 0.72, 0.72, 0.52, 0.48, 0.33, 0.17, 0.3,
          2.9, 2.4, 0.85, 0.85, 0.96, 0.78, 0.80, 0.70, 0.57, 0.45, 0.4, 0.25, 0.15,
          3.1, 2.2, 0.88, 0.88, 0.97, 0.88, 0.78, 0.77, 0.56, 0.46, 0.35, 0.3, 0.2))
```

# Version history

# Summary

# Introduction

Cite nf-core [@nf-core].

# Materials and Methods

## R and packages

This analysis was run with `r R.version$version.string`. Versions of packages used can be found in Table @tbl-cite-packages.

```{r tbl-cite-packages}
#| label: tbl-cite-packages
#| cache: false
#| tbl-cap: Versions of R and packages used in this analysis.

cite_packages(output = "table", pkgs = "Session", out.dir = getwd()) %>%
  kable()
```

# Results

## MST-1

### Resource usage and assembly quality with different parameter values

See (@fig-extraces & @tbl-assembly-stats).

* Main difference in time taken is the ORF-caller: Prokka is much slower
* Assembly time not very different between Megahit 
(mean: `r extraces %>% filter(process == 'MEGAHIT_INTERLEAVED') %>% summarise(m = mean(realtimec * num_cpus)) %>% pull(m)` seconds)
and RNASpades
(mean: `r extraces %>% filter(process == 'SPADES') %>% summarise(m = mean(realtimec * num_cpus)) %>% pull(m)` seconds).
* Memory consumption for RNASpades ~4 times higher than for Megahit.
* Assembly size at least twice larger for RNASpades than for Megahit.
* The proportion mapping back does not differ as much, suggesting that many of the extra contigs from RNASpades are rare.

```{r fig-extraces}
#| label: fig-extraces
#| fig-height: 5
#| fig-cap: '**CPU consumption, assembly memory usage and size.** A) Realtime cpu use per task type and pipeline execution, B) peak virtual memory usage and C) assembly size per assembly.'

p0 <- extraces %>%
  filter(project == 'mst-1', minlen == 0) %>%
  left_join(process_groups, by = join_by(process)) %>%
  group_by(process_group, run) %>%
  summarise(realtimec = sum(realtimec * num_cpus), .groups = 'drop') %>%
  ggplot(aes(x = run, y = realtimec, fill = process_group)) +
  geom_col() +
  scale_fill_brewer('Process group', palette = 'Paired') +
  xlab('') + ylab('Seconds') +
  coord_flip() +
  theme(axis.text.y = element_text(size=12))

p1 <- extraces %>%
  filter(project == 'mst-1', minlen == 0) %>%
  left_join(process_groups, by = join_by(process)) %>%
  filter(process_group == 'assembly') %>%
  group_by(run) %>%
  filter(peak_vmemc == max(peak_vmemc)) %>%
  ungroup() %>%
  transmute(assembler, bbnorm, peak_vmemc = round(peak_vmemc/1024^3)) %>%
  distinct() %>%
  ggplot(aes(x = assembler, y = peak_vmemc, colour = bbnorm)) +
  geom_point() +
  scale_colour_discrete('') +
  xlab('') +
  ylab('Max. virtual memory (GB)') +
  coord_flip() +
  theme(axis.text.y = element_text(size=12))

p2 <- transrates %>%
  filter(project == 'mst-1', minlen == 0) %>%
  mutate(mbp = n_bases/1000^2 %>% round()) %>%
  ggplot(aes(x = assembler, y = mbp, colour = bbnorm)) +
  geom_point() +
  scale_colour_discrete('') +
  xlab('') +
  ylab('Assembly size (Mbp)') +
  coord_flip() +
  theme(axis.text.y = element_text(size=12))

p0 / ( p1 + p2 ) +
  plot_layout(heights = c(4, 1), guides = 'collect') +
  plot_annotation(tag_levels = 'A')
```

```{r tbl-assembly-stats}
#| label: tbl-assembly-stats
#| tbl-cap: '**Overall statistics for MST-1 assemblies.** *) The assembly was made from read-normalized data. †) Contigs shorter than 200 nucleotides were removed.'

transrates %>%
  filter(project == 'mst-1') %>%
  inner_join(
    overall_stats %>% 
      transmute(project, assembler, bbnorm, minlen, sample, prop_mapped = idxs_n_mapped/n_non_contaminated) %>%
      distinct() %>%
      group_by(project, assembler, bbnorm, minlen) %>%
      summarise(mean_prop_mapped = mean(prop_mapped), .groups = 'drop'),
    by = join_by(project, assembler, bbnorm, minlen)
  ) %>%
  transmute(
    Assembly = assembly,
    `N. contigs` = n_seqs, `Size (Mbp)` = round(n_bases/1000^2, digits = 1),
    `Lengths` = sprintf("%d-%d", smallest, largest), `Mean length (bp)` = round(mean_len), N50 = n50,
    `Mean prop. mapped` = sprintf("%2.1f%%", mean_prop_mapped * 100)
  ) %>%
  arrange(Assembly) %>%
  kable()
```

### ORF calling and annotation

See (@fig-orf-calling).

-   The RNASpades assemblies generally have a longer tail of rare ORFs, particularly for the non-read-depth-normalized assembly
-   Read-depth normalization in general produces assemblies which after ORF calling have a much narrower count distribution
-   The difference between the two assembly programs is much stronger when ORFs are called with Prodigal rather than Prokka
-   Whereas most rare ORFs -- occurring in few samples -- have very low counts, a few rare ORFs, have very large counts -- contaminants or viruses?
-   The Prokka ORF caller in combination with read-depth normalization exhibit similar count distributions for both assembly programs
-   Counts much higher for NA2 with Prodigal than with Prokka, particularly for the RNASpades assembly: contamination?

```{r fig-orf-calling}
#| label: fig-orf-calling
#| fig-height: 10
#| fig-cap: '**ORF calling statistics.** A) Rank-abundance curves per ORF with number of samples each ORF occurs in in colour. B) Counts per sample. *) The assembly was made from read-depth-normalized data. †) Contigs shorter than 200 nucleotides were removed before ORF calling.'

plot_rank_abundance <- function(ds) {
  ds %>%
    ggplot(aes(x = cr, y = count, colour = n_samples)) +
    geom_point() +
    scale_colour_viridis_c('N. samples') +
    scale_y_log10() +
    geom_hline(yintercept = 1e1, linetype = 2) +
    xlab('') +
    ylab('N. mapped read pairs') +
    facet_grid(assembly ~ orf_caller) +
    theme(
      legend.position = 'bottom',
      axis.text.x = element_blank(),
      axis.ticks.x = element_blank()
    )
}

p0 <- counts %>%
  filter(project == 'mst-1') %>%
  group_by(run, assembly, assembler, orf_caller, bbnorm, orf) %>%
  summarise(count = sum(count), tpm = sum(tpm), n_samples = n(), .groups = 'drop_last') %>%
  mutate(cr = rank(desc(count), ties.method = 'first'), tpmr = rank(desc(tpm), ties.method = 'first')) %>%
  ungroup() %>%
  plot_rank_abundance()

p1 <- counts %>%
  filter(project == 'mst-1') %>%
  mutate(assembly_orfc = sprintf("%s %s", assembly, orf_caller)) %>%
  group_by(assembly_orfc, sample) %>%
  summarise(count = sum(count), tpm = sum(tpm), n_samples = n(), .groups = 'drop') %>%
  ggplot(aes(x = sample, y = count, fill = sample)) +
  geom_col() +
  scale_colour_brewer('Sample', palette = 'Paired') +
  xlab('') +
  facet_wrap(~assembly_orfc, ncol = 2) +
  theme(
    legend.position = 'bottom',
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank()
  )

p2 <- counts %>%
  filter(project == 'mst-1', minlen == 0) %>%
  select(project:minlen, orf, length) %>% 
  mutate(length = length * 3) %>%
  distinct() %>%
  ggplot(aes(x = assembly, y = length, fill = orf_caller)) +
  geom_violin() +
  scale_y_log10() +
  coord_flip()

( p0 + p1 ) / p2 +
  plot_layout(widths = c(3, 2), heights = c(7,2)) +
  plot_annotation(tag_levels = 'A')
```

-   Large proportions of ORFs annotated at species level, particularly when weighted by count
-   Tendency that ORFs annotated at higher ranks are rarer than species-assigned ORFs.
-   Why are mean tpms so low with Prodigal? Could it be explained by rare ORFs, in particular singletons from NA2?

```{r fig-na2-rank-abundance}
#| label: fig-na2-rank-abundance
#| include: false

# I made this as an experiment to see if this was the way of showing what's going on in NA2, but it doesn't
# work so well.
counts %>%
  filter(project == 'mst-1', sample == 'NA2') %>%
  group_by(run, assembly, assembler, orf_caller, bbnorm, orf) %>%
  summarise(count = sum(count), tpm = sum(tpm), .groups = 'drop_last') %>%
  mutate(cr = rank(desc(count), ties.method = 'first'), tpmr = rank(desc(tpm), ties.method = 'first')) %>%
  ungroup() %>%
  inner_join(
    counts %>%
      filter(project == 'mst-1') %>%
      count(run, orf, name = 'n_samples'),
    by = join_by(run, orf)
  ) %>%
  plot_rank_abundance()
```

### What's the matter with NA2?

* Extreme abundances for contigs and ORFs
* Not seen in any other sample

```{r fig-top-abundances}
#| label: fig-top-abundances
#| fig-cap: '**Ten most abundant A) contigs and B) ORFs per assembly and ORF caller.**'
#| fig-height: 10

p0 <- idxstats %>%
  filter(project == 'mst-1') %>%
  group_by(project, run, assembly, assembler, bbnorm, minlen, contig) %>%
  summarise(max_tpm = max(tpm), .groups = 'drop_last') %>%
  slice_max(n = 10, order_by = max_tpm) %>%
  ungroup() %>%
  inner_join(idxstats %>% select(project, run, contig, sample, tpm), by = join_by(project, run, contig)) %>%
  ggplot(aes(x = contig, y = tpm, fill = sample)) +
  geom_col() +
  coord_flip() +
  facet_wrap(~assembly, scale = 'free_y', ncol = 6) +
  xlab('') +
  scale_y_continuous(limits = c(0, 5e5), breaks = seq(2.5e5, 2.5e5, 2.5e5), labels = scales::scientific) +
  theme(
    axis.text.y  = element_blank(),
    axis.ticks.y = element_blank()
  )
  
p1 <- counts %>%
  filter(project == 'mst-1') %>%
  group_by(project, run, assembly, assembler, orf_caller, bbnorm, minlen, orf) %>%
  summarise(max_tpm = max(tpm), .groups = 'drop_last') %>%
  slice_max(n = 10, order_by = max_tpm) %>%
  ungroup() %>%
  inner_join(counts %>% select(project, run, orf, sample, tpm), by = join_by(project, run, orf)) %>%
  mutate(assembly_orfc = sprintf("%s %s", assembly, orf_caller)) %>%
  ggplot(aes(x = orf, y = tpm, fill = sample)) +
  geom_col() +
  coord_flip() +
  facet_wrap(~assembly_orfc, ncol = 2, scale = 'free_y') +
  theme(
    axis.text.y  = element_blank(),
    axis.ticks.y = element_blank()
  )

p0 / p1 +
  plot_layout(heights = c(1,4), guides = 'collect') +
  plot_annotation(tag_levels = 'A')
```

```{r fig-mst-1-annot-success}
#| label: fig-mst-1-annot-success
#| fig.height: 6
#| fig-cap: '**Annotation success.** A) GTDB taxonomy and B) combinations of functional annotation. Unweighted, weighted by count and tpm respectively.'

p0 <- eukulele %>%
  filter(project == 'mst-1', db == 'gtdb') %>%
  inner_join(
    counts %>%
      group_by(project, run, assembler, orf_caller, bbnorm, minlen, orf) %>%
      summarise(count = sum(count), tpm = sum(tpm), .groups = 'drop'),
    by = join_by(project, run, assembler, orf_caller, bbnorm, minlen, orf)
  ) %>%
  group_by(run, assembly, assembler, orf_caller, bbnorm, minlen, taxon_rank) %>%
  summarise(`N. ORFs` = n(), count = sum(count), tpm = sum(tpm), .groups = 'drop') %>%
  pivot_longer(`N. ORFs`:tpm, names_to = 'var', values_to = 'value') %>%
  mutate(var = factor(var, levels = c('N. ORFs', 'count', 'tpm'), ordered = TRUE)) %>%
  ggplot(aes(run, value, fill = taxon_rank)) +
  geom_col() +
  scale_fill_brewer('Rank', palette = 'Set1') +
  facet_wrap(~var, scales = 'free_x') +
  xlab('') + ylab('') +
  coord_flip() +
  theme(
    axis.text.x = element_text(angle = 65, hjust = 1)
  )

p1 <- func_annots %>%
  filter(project == 'mst-1') %>%
  inner_join(
    counts %>%
      group_by(project, run, assembler, orf_caller, bbnorm, minlen, orf) %>%
      summarise(count = sum(count), tpm = sum(tpm), .groups = 'drop'),
    by = join_by(project, run, assembler, orf_caller, bbnorm, minlen, orf)
  ) %>%
  group_by(run, assembly, assembler, orf_caller, bbnorm, minlen, combination) %>%
  summarise(`N. ORFs` = n(), count = sum(count), tpm = sum(tpm), .groups = 'drop') %>%
  pivot_longer(`N. ORFs`:tpm, names_to = 'var', values_to = 'value') %>%
  mutate(var = factor(var, levels = c('N. ORFs', 'count', 'tpm'), ordered = TRUE)) %>%
  ggplot(aes(run, value, fill = combination)) +
  geom_col() +
  scale_fill_brewer('Annotation tools', palette = 'Set2') +
  facet_wrap(~var, scales = 'free_x') +
  xlab('') + ylab('') +
  coord_flip() +
  theme(
    axis.text.x = element_text(angle = 65, hjust = 1)
  )

p0 / p1 +
  plot_annotation(tag_levels = 'A')
```

### Functional annotation - comparison with original data

```{r fig-mst-1-func-annot-comparison}
#| label: fig-mst-1-func-annot-comparison
#| fig.height: 6
#| fig-cap: '**Annotation comparison** A) Eggnogs COG category and B) SEED category from original paper.'
#| cache-lazy: false

# it makes easier to compare one type of run with the original function annotation. 
# we can have as supplementary figures a plot with all the combination.
# here I will plot megahit.prokka.without_bbnorm vs original paper

# Classification by COG category
counts.eggnogs <- counts %>%
  mutate(sample = if_else(grepl("KA1", sample), 'Lca', sample)) %>%
  mutate(sample = if_else(grepl("KA2", sample), 'Lca', sample)) %>%
  mutate(sample = if_else(grepl("NA1", sample), 'Hca', sample)) %>%
  mutate(sample = if_else(grepl("NA2", sample), 'Hca', sample)) %>%
  mutate(sample = if_else(grepl("KB1", sample), 'Lcc', sample)) %>%
  mutate(sample = if_else(grepl("KB2", sample), 'Lcc', sample)) %>%
  mutate(sample = if_else(grepl("NB1", sample), 'Hcc', sample)) %>%
  mutate(sample = if_else(grepl("NB2", sample), 'Hcc', sample)) %>%
  group_by(project, run, assembler, orf_caller, bbnorm, minlen, sample, orf) %>%
  summarise(m_tpm = mean(tpm),
            sd = sd(tpm), 
            .groups = 'drop') %>%
  left_join( eggnogs, by = join_by(project, run, assembler, orf_caller, bbnorm, minlen, orf) ) %>%
  mutate(COG_category = replace(COG_category, COG_category == 'A', 'RNA_process')) %>%
  mutate(COG_category = replace(COG_category, COG_category == 'B', 'Chromatin_Struc')) %>%
  mutate(COG_category = replace(COG_category, COG_category == 'C', 'Energy_prod')) %>%
  mutate(COG_category = replace(COG_category, COG_category == 'D', 'Cell_cycle')) %>%
  mutate(COG_category = replace(COG_category, COG_category == 'E', 'AA_metab')) %>%
  mutate(COG_category = replace(COG_category, COG_category == 'F', 'Nucl_metab')) %>%
  mutate(COG_category = replace(COG_category, COG_category == 'G', 'Carbohy_metab')) %>%
  mutate(COG_category = replace(COG_category, COG_category == 'H', 'Coenz_metab')) %>%
  mutate(COG_category = replace(COG_category, COG_category == 'I', 'Lipid_metab')) %>%
  mutate(COG_category = replace(COG_category, COG_category == 'J', 'Tranlsation')) %>%
  mutate(COG_category = replace(COG_category, COG_category == 'K', 'Transcription')) %>%
  mutate(COG_category = replace(COG_category, COG_category == 'L', 'Replication')) %>%
  mutate(COG_category = replace(COG_category, COG_category == 'M', 'Cell_wall')) %>%
  mutate(COG_category = replace(COG_category, COG_category == 'N', 'Cell_motility')) %>%
  mutate(COG_category = replace(COG_category, COG_category == 'O', 'Post-transl_mod')) %>%
  mutate(COG_category = replace(COG_category, COG_category == 'P', 'Inorg_ion_transp')) %>%
  mutate(COG_category = replace(COG_category, COG_category == 'Q', 'Sec_Structure')) %>%
  mutate(COG_category = replace(COG_category, COG_category == 'T', 'Signal_Transduc')) %>%
  mutate(COG_category = replace(COG_category, COG_category == 'U', 'Intracel_traf')) %>%
  mutate(COG_category = replace(COG_category, COG_category == 'Y', 'Nucl_structure')) %>%
  mutate(COG_category = replace(COG_category, COG_category == 'Z', 'Cytoskeleton')) %>%
  mutate(COG_category = replace(COG_category, COG_category == 'R', 'Gen_Func')) %>%
  mutate(COG_category = replace(COG_category, COG_category == 'S', 'Func_unknown')) %>%
  mutate(COG_category = replace(COG_category, COG_category == '-', 'Func_unknown'))

top13cog <- counts.eggnogs %>%
  #filter( COG_category != '(S)Func_unknown') %>%
  group_by(COG_category, sample) %>%
  summarise(tpm = sum(m_tpm),  .groups = 'drop_last') %>%
  summarise(mean_tpm = mean(tpm), .groups = 'drop') %>%
  slice_max(mean_tpm, n = 13) %>%
  na.omit()

# top 13 expressed COG category divided by samples
# DL: What's going on here with the two plots?
p3 <- ( counts.eggnogs %>%
    as_tibble() %>%
    inner_join(top13cog, by = 'COG_category') %>%
    group_by(run, sample, COG_category) %>%
    summarise(tpm = sum(m_tpm)/10^5, .groups = 'drop') %>%
    mutate(COG_category = reorder(COG_category, -tpm)) %>%
    na.omit() %>%
    filter( run == 'megahit.prokka.without_bbnorm') %>%
    ggplot(aes(x = COG_category, y = tpm)) +
    theme(
          legend.position = 'null') +
    scale_fill_manual(values = mst1.samples.color) +
    geom_col(aes(fill = sample), position = 'dodge', colour = 'Black') +
    labs(x = "", y = "TPM(x10^5)") +
    theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7)) ) +
  ( original.fun %>%
    as_tibble() %>%
    group_by(sample, SEED) %>%
    summarise(tpm = sum(tpm), .groups = 'drop') %>%
    mutate(SEED = reorder(SEED, -tpm)) %>%
    na.omit() %>%
    ggplot(aes(x = SEED, y = tpm)) +
      scale_fill_manual(values = mst1.samples.color) +
      geom_col(aes(fill = sample), position = 'dodge', colour = 'Black') +
      labs(y = "TPM(x10^5)", x = "") +
      theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7)) )

p3 + plot_annotation(tag_levels = 'A')
```

```{r fig-mst-1-tax-annot-comparison}
#| label: fig-mst-1-tax-annot-comparison
#| warning: false
#| fig.height: 6
#| fig-cap: '**Taxonomy annotation comparison** A) GTDB database from nf-core/metatdenovo and B) taxonomy from original paper.'
#| cache-lazy: false

# it makes easier to compare one type of run with the original annotation. 
# we can have as supplementary figures a plot with all the combination.
# here I will plot megahit.prokka.without_bbnorm vs original paper

# join taxonomy and counts
counts.tax <- counts %>%
  mutate(sample = if_else(grepl("KA1", sample), 'Lca', sample)) %>%
  mutate(sample = if_else(grepl("KA2", sample), 'Lca', sample)) %>%
  mutate(sample = if_else(grepl("NA1", sample), 'Hca', sample)) %>%
  mutate(sample = if_else(grepl("NA2", sample), 'Hca', sample)) %>%
  mutate(sample = if_else(grepl("KB1", sample), 'Lcc', sample)) %>%
  mutate(sample = if_else(grepl("KB2", sample), 'Lcc', sample)) %>%
  mutate(sample = if_else(grepl("NB1", sample), 'Hcc', sample)) %>%
  mutate(sample = if_else(grepl("NB2", sample), 'Hcc', sample)) %>%
  group_by(project, run, assembler, orf_caller, bbnorm, minlen, sample, orf) %>%
  summarise(m_tpm = mean(tpm),
            sd = sd(tpm), 
            .groups = 'drop') %>%
  left_join( eukulele, by = join_by(project, run, assembler, orf_caller, bbnorm, minlen, orf) ) %>%
  filter( run == 'megahit.prokka.without_bbnorm')
counts.tax$family[is.na(counts.tax$family)] <- 'uncl.'

# calculate tpms Family level for bacteria
# top 7 family
top7_family <- counts.tax %>%
  filter( family != 'uncl.') %>%
  group_by(family) %>%
  summarise(tpm = sum(m_tpm), .groups = 'drop') %>%
  slice_max(tpm, n = 7) %>%
  select(-tpm)
  
RANKS.family.tax = c('Schleiferiaceae', 'Flavobacteriaceae', 'Pseudohongiellaceae', 'Alteromonadaceae', 'Thalassospiraceae', 'Pelagibacteraceae', 'Rhodobacteraceae')
matchcol.taxonomy <- c( "#962d19", "#BA5019", "#f8b53f",
                                   "#bae53f", "#4e3484", "#4e4e84", "#675084")
RANKS.original.tax = c("Other Flavobacteria", "Flavobacteriaceae", "Other Gammaproteobacteria", "Alteromonadaceae", "Other Alphaproteobacteria", "SAR11 clade", "Rhodobacteraceae")

matchingcolors.original.tax <- c("#952720", "#BA5019", "#F8E53F",
                                 "#bae53f", "#113484", "#115084","#675084")
# Schleiferiaceae     = #962d19
# Flavobacteriaceae   = #BA5019
# Pseudohongiellaceae = #f8b53f
# Alteromonadaceae    = #bae53f
# Thalassospiraceae   = #4e3484
# Pelagibacteraceae   = #4e4e84
# Rhodobacteraceae    = #675084

p4 <- ( counts.tax %>%
  inner_join(top7_family, by = "family") %>%
  group_by(sample, family) %>%
  summarise(sum_tpm = sum(m_tpm)/10^5, .groups = 'drop') %>%
  ggplot(aes(x = sample, y = sum_tpm, fill = factor(family, levels = RANKS.family.tax))) +
  scale_fill_manual(values = matchcol.taxonomy) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10)) +
  ylab("Transcripts per million") +
  scale_y_continuous(breaks = seq(0, 8, by = 2), limits = c(0, 8)) +
  geom_col(width= .70, colour="black") +
  labs(x = NULL, fill = "Family", y ="TPM (x10^5)") ) +
  ( original.tax %>%
    ggplot(aes(x = sample, y = tpm, fill = factor(family, levels = RANKS.original.tax))) +
    scale_fill_manual(values = matchingcolors.original.tax) +
    scale_y_continuous(breaks = seq(0, 8, by = 2), limits = c(0, 8)) +
    theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10)) +
    geom_col(width= .70, colour="black") +
    ylab("Transcripts per million") +
    labs(fill = "Family", y = "TPM (x10^5)", x = NULL)
  )

p4 + plot_annotation(tag_levels = 'A')
```

```{r fig-edgeR-analysis}
#| label: fig-mst-1-edgerR-analysis
#| warning: false
#| fig.height: 6
#| fig-cap: '**Edger output** A) eggnogs that have differencial expression according to EdgeR output'
#| cache-lazy: false

deg <- edger %>%
  filter(PValue < 0.01) %>%
  filter(logFC > 1.5) %>%
  filter(contrast == 'KA-KB') %>%
  inner_join((eggnogs.edger %>%
               select(-orf) %>%
               distinct()) %>%
               filter( taxon == '1|root'), by = 'eggnog') %>%
  #filter( cog_category != '-' ) %>%
  #filter(!grepl("^2", eggnog)) %>%
  group_by(eggnog) %>%
  mutate(rank = row_number()) %>%
  ungroup() %>%
  filter( rank == 1) %>%
  inner_join(eggnogs.edger[,c(1,2)], by = 'eggnog' ) %>%
  inner_join(counts %>% filter( sample == 'KA1' | sample == 'KA2' |
                                  sample == 'KB1' | sample == 'KB2'), by = 'orf') %>%
  mutate(sample = if_else(grepl("KA1", sample), 'KA', sample)) %>%
  mutate(sample = if_else(grepl("KA2", sample), 'KA', sample)) %>%
  mutate(sample = if_else(grepl("KB1", sample), 'KB', sample)) %>%
  mutate(sample = if_else(grepl("KB2", sample), 'KB', sample)) %>%
  group_by(sample, eggnog, logFC) %>%
  summarise(m_tpm = mean(tpm), .groups = 'drop') %>%
  ggplot(aes(x=eggnog)) +
  geom_col(aes(y=log(m_tpm), fill = sample),
           position = 'dodge',
           colour = 'Black') +
        geom_point(aes(y=logFC)) +
        theme_minimal() +
  scale_y_continuous(
    name = "log(TPM)",
    sec.axis = sec_axis(~ ., name = "logFC")
  ) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 10))

deg
```

# Discussion

# References
